import gleam/int
import gleam/io
import gleam/otp/task
import gloop
import timestamps

//intermediate condition
pub fn blocking_loop(
  state state: a,
  code_to_run_before_condition code_to_run_before_condition: fn(a) -> a,
  condition condition: fn(a) -> Bool,
  code_to_run_after_condition code_to_run_after_condition: fn(a) -> a,
) -> a {
  let intermediate_state = code_to_run_before_condition(state)
  case condition(intermediate_state) {
    False -> intermediate_state
    True -> {
      let new_state = code_to_run_after_condition(intermediate_state)
      blocking_loop(
        new_state,
        code_to_run_before_condition,
        condition,
        code_to_run_after_condition,
      )
    }
  }
}

pub fn loop(
  state state: a,
  code_to_run_before_condition code_to_run_before_condition: fn(a) -> a,
  condition condition: fn(a) -> Bool,
  code_to_run_after_condition code_to_run_after_condition: fn(a) -> a,
) -> a {
  let task =
    task.async(fn() {
      blocking_loop(
        state,
        code_to_run_before_condition,
        condition,
        code_to_run_after_condition,
      )
    })
  //  io.debug(task)
  task.await_forever(task)
}

pub type CollatzState {
  CollatzState(n: Int, iterations: Int)
}

pub type CollatzError {
  NegativeValue
  ZeroValue
}

pub fn blocking_collatz(start_value: Int) -> Result(CollatzState, CollatzError) {
  //Returns the number of steps necessary for the Collatz
  //sequence starting at `start_value` to reach 1.

  // error checking, don't run if intial value is negative or zero
  let n_is_neg = start_value < 0
  let n_is_0 = start_value == 0
  let initial_state = CollatzState(n: start_value, iterations: 0)
  case n_is_0 {
    True -> Error(ZeroValue)
    False ->
      case n_is_neg {
        True -> Error(NegativeValue)
        False ->
          Ok(
            gloop.blocking_while(
              state: initial_state,
              pre_run_condition: fn(state: CollatzState) -> Bool {
                state.n != 1
              },
              code_to_run: fn(state: CollatzState) -> CollatzState {
                let n = state.n
                let iterations = state.iterations
                let is_even = int.is_even(n)
                //              io.debug(n)
                //              io.debug(iterations)
                case is_even {
                  True -> CollatzState(n / 2, iterations + 1)
                  False -> CollatzState({ 3 * n } + 1, iterations + 1)
                }
              },
            ),
          )
      }
  }
}

pub fn non_blocking_collatz(
  start_value: Int,
) -> Result(CollatzState, CollatzError) {
  //Returns the number of steps necessary for the Collatz
  //sequence starting at `start_value` to reach 1.

  // error checking, don't run if intial value is negative or zero
  let n_is_neg = start_value < 0
  let n_is_0 = start_value == 0
  let initial_state = CollatzState(n: start_value, iterations: 0)
  case n_is_0 {
    True -> Error(ZeroValue)
    False ->
      case n_is_neg {
        True -> Error(NegativeValue)
        False ->
          Ok(
            gloop.while(
              pre_run_condition: fn(state: CollatzState) -> Bool {
                state.n != 1
              },
              state: initial_state,
              code_to_run: fn(state: CollatzState) -> CollatzState {
                let n = state.n
                let iterations = state.iterations
                let is_even = int.is_even(n)
                // io.debug(n)
                // io.debug(iterations)
                case is_even {
                  True -> CollatzState(n / 2, iterations + 1)
                  False -> CollatzState({ 3 * n } + 1, iterations + 1)
                }
              },
            ),
          )
      }
  }
}

pub fn main() {
  let start_time1 = timestamps.new() |> timestamps.value_of
  io.debug(non_blocking_collatz(
    989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647_989_345_275_647,
  ))
  let end_time1 = timestamps.new() |> timestamps.value_of
  io.debug(end_time1 - start_time1)
  io.debug(non_blocking_collatz(-1))
  io.debug(non_blocking_collatz(0))
  io.debug(non_blocking_collatz(1))
  let start_time2 = timestamps.new() |> timestamps.value_of
  io.debug(blocking_collatz(

  ))
  let end_time2 = timestamps.new() |> timestamps.value_of
  io.debug(end_time2 - start_time2)
}
